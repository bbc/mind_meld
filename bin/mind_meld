#!/usr/bin/env ruby

require 'pathname'
ENV['BUNDLE_GEMFILE'] ||= File.expand_path(
  '../../Gemfile',
  Pathname.new(__FILE__).realpath
)

require 'optparse'
require 'ostruct'

$LOAD_PATH << File.expand_path('../../lib', __FILE__)
require 'mind_meld'
require 'mind_meld/device'

url = ENV['HIVEMIND_URL'] || 'http://localhost:3000'
pem = ENV['HIVEMIND_PEM'] || nil
ca_file = ENV['HIVEMIND_CAFILE'] || nil
verify_mode = ENV['HIVEMIND_VERIFY_MODE'] || nil

cmd = ARGV.shift

class Parser
  def self.parse(type, opts = {})
    connection = nil
    options = OpenStruct.new

    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: mind_meld action"
      opts.on("-i ID") do |i|
        connection = MindMeld::Device.new(
              url: ENV['HIVEMIND_URL'] || 'http://localhost:3000',
              pem: ENV['HIVEMIND_PEM'] || nil,
              ca_file: ENV['HIVEMIND_CAFILE'] || nil,
              verify_mode: ENV['HIVEMIND_VERIFY_MODE'] || nil,
              device: { id: i }
            )
      end
      case type
      when 'action'
        opts.on("-t TYPE") { |t| options.action_type = t }
        opts.on("-b BODY") { |b| options.body = b }
      end
    end

    opt_parser.parse(opts)
    return { connection: connection, options: options }
  end
end

case cmd
when 'list'
  mm = MindMeld.new(
        url: url,
        pem: pem,
        ca_file: ca_file,
        verify_mode: verify_mode
      )

  devs = mm.devices
  if devs.is_a? Hash
    if devs['status'] == '500'
      puts "Error: #{devs['error']}"
    else
      puts "Error: Cannot understand response"
      puts devs
    end
  else
    devs.each do |dev|
      dev['plugin_type'] =~ /HiveMind(.*)::/
      type = $1
      puts "%10s : %4d : %s" % [ type, dev['id'], dev['name'] ]
    end
  end
when 'action'
  opts = Parser.parse 'action', ARGV

  opts[:connection].create_action( opts[:options].to_h )

when 'details'
  opts = Parser.parse 'details', ARGV
  dd = opts[:connection].device_details(view: 'simple')
  puts "Id: #{dd['id']}"
  puts "Name: #{dd['name']}"
  puts "Model: #{dd['model_display_name']} (#{dd['model']})"
  puts "Brand: #{dd['brand_display_name']} (#{dd['brand']})"
  puts "Type: #{dd['device_type']}"
  puts "Serial: #{dd['serial']}"
  puts "Asset Id: #{dd['asset_id']}"
when nil, /^-+/
  puts "Missing command"
  puts "(and missing help file)"
else
  puts "Unknown command '#{cmd}'"
end
